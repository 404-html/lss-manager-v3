/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./modules/lss-managedsettings/ManagedSettings.user.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./modules/lss-managedsettings/ManagedSettings.user.js":
/*!*************************************************************!*\
  !*** ./modules/lss-managedsettings/ManagedSettings.user.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function ManagedSettings()\r\n{\r\n    'use strict';\r\n\r\n    let VERSION = 1.2;\r\n    let EXPORT_COMPATIBILITY = 1.2;\r\n    let EXPORT_FILE_NAME = \"settings.lssm\";\r\n\r\n    I18n.translations.de.lssm.managedsettings = {\r\n        title: \"LSSM Einstellungen\",\r\n        text1: \"Hier kannst du Einstellungen für deine aktivierten Plugins vornehmen\",\r\n        text2: \"\",\r\n        save: \"Speichern & Schließen\",\r\n        settings_tab: \"Einstellungen\",\r\n        export_btn: \"Einstellungen exportieren\",\r\n        import_btn: \"Einstellungen importieren\",\r\n        reset_btn: \"Zurücksetzen\",\r\n        reset_hint: \"Möchtest du die Einstellungen dieses Moduls wirklich auf die Standardwerte zurücksetzen?\",\r\n        reset_success: \"Reset der Einstellungen erfolgreich. Bitte lade die Seite neu, damit diese wirksam sind.\",\r\n        export_success: \"Einstellungen erfolgreich exportiert\",\r\n        export_hint: \"Bitte beachte, dass nur bereits gespeicherte Einstellungen von momentan aktivierten Module exportiert werden können.\",\r\n        import_success: \"Die Einstellungen wurden erfolgreich importiert. Du musst die Seite neu laden, damit diese wirksam sind.\",\r\n        import_missmatch: \"Die eingelesene Datei ist mit der aktuellen Version von LSSM leider nicht mehr kompatibel.\",\r\n        import_fail: \"Fehler: Beim Import der Datei ist ein Fehler aufgetreten: <strong>{0}</strong>. Bitte informiere einen Entwickler.\"\r\n    };\r\n\r\n    I18n.translations.en.lssm.managedsettings = {\r\n        title: \"LSSM Settings\",\r\n        text1: \"Here you can change the settings of your activated plugins.\",\r\n        text2: \"\",\r\n        save: \"Save & Close\",\r\n        settings_tab: \"Settings\",\r\n        export_btn: \"Export settings\",\r\n        import_btn: \"Import settings\",\r\n        reset_btn: \"Reset settings\",\r\n        reset_hint: \"Are you sure you want to reset the settings of this module to the default values?\",\r\n        reset_success: \"Successfully reset the settings. You need to reload the page to make them work.\",\r\n        export_success: \"Sucsessfully exported settings\",\r\n        export_hint: \"Please note that only previously saved settings of currently activated modules can be exported.\",\r\n        import_success: \"The settings were successfully imported. You need to reload the page to make them work.\",\r\n        import_missmatch: \"The read-in file is unfortunately no longer compatible with the current version of LSSM.\",\r\n        import_fail: \"Error: An error occurred while importing the file: <strong> {0} </strong>. Please inform a developer.\"\r\n    };\r\n\r\n    I18n.translations.nl.lssm.managedsettings = {\r\n        title: \"LSSM instellingen\",\r\n        text1: \"Hier kun je de instellingen van je geïnstalleerde plugins aanpassen.\",\r\n        text2: \"\",\r\n        save: \"Opslaan & sluiten\",\r\n        settings_tab: \"Instellingen\",\r\n        export_btn: \"Instellingen exporteren\",\r\n        import_btn: \"Instellingen importeren\",\r\n        reset_btn: \"Reset\",\r\n        reset_hint: \"Weet u zeker dat u de instellingen van deze module wilt resetten naar de standaardwaarden?\",\r\n        reset_success: \"Stel de instellingen succesvol terug. Je moet de pagina opnieuw laden om ze te laten werken.\",\r\n        export_success: \"Instellingen succesvol geëxporteerd\",\r\n        export_hint: \"Houdt er rekening mee dat alleen eerder opgeslagen instellingen van momenteel geactiveerde modules kunnen worden geëxporteerd.\",\r\n        import_success: \"De instellingen zijn succesvol geïmporteerd. Ververs de pagina om ze te gebruiken.\",\r\n        import_missmatch: \"Het te openen bestand werkt helaas niet meer met de huidige versie van LSSM.\",\r\n        import_fail: \"Foutmelding: Er is een fout opgetreden bij het importeren van het volgende bestand: <strong> {0} </ strong>.\" +\r\n        \"Informeer AUB een ontwikkelaar van deze melding.\"\r\n    };\r\n    function closeManagedSettings() {\r\n        $(document).unbind(lssm.hook.prename(\"lightboxClose\"), closeManagedSettings);\r\n        $(\"#lightbox_iframe_\"+iframe_lightbox_number).remove();\r\n    }\r\n\r\n    function renderSettings() {\r\n        $(document).bind(lssm.hook.prename(\"lightboxClose\"), closeManagedSettings);\r\n        let markup = '<div class=\"col-md-12\" id=\"' + lssm.config.prefix + '_appstore_ManagedSettings\">';\r\n        markup += '<h1>' + I18n.t('lssm.managedsettings.title') + '</h1>';\r\n        markup += '<p>' + I18n.t('lssm.managedsettings.text1') + '</p>';\r\n        markup += '<span class=\"pull-right\">';\r\n        markup += '<button type=\"button\" class=\"btn btn-success btn-sm ';\r\n        markup += lssm.config.prefix +'_appstore_ManagedSettings_close\" aria-label=\"Close\">';\r\n        markup += '<span aria-hidden=\"true\">' + I18n.t('lssm.managedsettings.save') + '</span>';\r\n        markup += '</button>';\r\n        markup += '<a id=\"lssm-export-settings\" class=\"btn btn-warning btn-xs\" style=\"margin-right: 5px;\">';\r\n        markup += '<span aria-hidden=\"true\"><span class=\"glyphicon glyphicon-floppy-save\"></span>' + I18n.t(\r\n            'lssm.managedsettings.export_btn') + '</span>';\r\n        markup += '</a>';\r\n        markup += '<input type=\"file\" accept=\".lssm\" id=\"lssm-import-file\" style=\"display:none\">';\r\n        markup += '<a id=\"lssm-import-settings\" class=\"btn btn-success btn-xs\" style=\"margin-right: 5px;\">';\r\n        markup += '<span aria-hidden=\"true\"><span class=\"glyphicon glyphicon-floppy-open\"></span>' + I18n.t(\r\n            'lssm.managedsettings.import_btn') + '</span>';\r\n        markup += '</a>';\r\n        markup += '<span class=\"label label-danger\">Version: ' + VERSION + '</span>';\r\n        markup += '</span>';\r\n        markup += '</div>';\r\n        markup += '<div class=\"col-md-12\">';\r\n        markup += '<fieldset id=\"module_settings\" style=\"margin-bottom: 10px;\">';\r\n        markup += '<div id=\"managedsettings_tab_button\"></div>';\r\n        markup += '<legend>' + I18n.t('lssm.managedsettings.text2') + '</legend>';\r\n        markup += '<div id=\"managedsettings_tabs\">';\r\n        markup += '</div>';\r\n        markup += '</fieldset>';\r\n        markup += '</div>';\r\n        markup += '<p>';\r\n        markup += '<button type=\"button\" class=\"btn btn-success btn-sm ';\r\n        markup += lssm.config.prefix +'_appstore_ManagedSettings_close\" aria-label=\"Close\">';\r\n        markup += '<span aria-hidden=\"true\">' + I18n.t('lssm.managedsettings.save') + '</span>';\r\n        markup += '</button>';\r\n        markup += '</p>';\r\n        markup += '</div>';\r\n        //$('#map_outer').before(markup);\r\n        let dom = lssm.modal.show(markup);\r\n\r\n        let sortable = [];\r\n        for (let module in lssm.managedSettings.registeredModules) {\r\n            sortable.push(lssm.managedSettings.registeredModules[module]);\r\n        }\r\n\r\n        sortable.sort(function (a, b) {\r\n            if (a.title < b.title) return -1;\r\n            if (a.title > b.title) return 1;\r\n            return 0;\r\n        });\r\n        let first = true;\r\n        $.each(sortable, function () {\r\n            let module = this;\r\n            let moduleKey = module.id;\r\n            $(\"#managedsettings_tab_button\").append('<button id=\"' + moduleKey + '\" class=\"btn btn-sm btn-primary\">' + module.title + '</button>');\r\n            markup = \"\";\r\n            if(first)\r\n            {\r\n                markup += '<div id=\"' + moduleKey + '_wrap\">';\r\n                first = false;\r\n            }\r\n            else\r\n                markup += '<div id=\"' + moduleKey + '_wrap\" style=\"display:none\">';\r\n            markup += '<h3>' + module.title +\r\n                '<button class=\"btn btn-default settings-reset\" data-module=\"' + moduleKey +\r\n                '\" style=\"margin-left: 5px;\" type=\"reset\"><span class=\"glyphicon glyphicon-floppy-remove\" title=\"' + I18n.t(\r\n                    'lssm.managedsettings.reset_btn') + '\"></span></button ></h3>';\r\n            if (module.info_text) {\r\n                markup += '<h5 id=\"' + moduleKey + '_description\">' + module.info_text + '</h5>';\r\n            }\r\n            markup += '</div>';\r\n            $('#managedsettings_tabs').append(markup);\r\n            for (let settingsKey in module.settings) {\r\n                if (module.settings[settingsKey].ui.parent) {\r\n                    $('#' + module.settings[settingsKey].ui.parent + '_wrap').append(renderUIElement(moduleKey, settingsKey, module\r\n                        .settings[settingsKey]));\r\n                } else {\r\n                    $('#' + moduleKey + '_wrap').append(renderUIElement(moduleKey, settingsKey, module.settings[settingsKey]));\r\n                }\r\n            }\r\n        });\r\n        $('#managedsettings_tab_button button').on(\"click\", function(e){\r\n            let tab = e.target.getAttribute('id');\r\n            $('#managedsettings_tabs').children(':visible').fadeOut('fast', function(){\r\n                $('#managedsettings_tabs #' + tab + '_wrap').fadeIn();\r\n            });\r\n        });\r\n\r\n\r\n        // Save & Close function\r\n        $('.' + lssm.config.prefix + '_appstore_ManagedSettings_close').click(function () {\r\n            saveSettings();\r\n            location.reload();\r\n        });\r\n    }\r\n\r\n\r\n    function applySettingsFunctions() {\r\n        for (let moduleKey in lssm.managedSettings.registeredModules) {\r\n            let module = lssm.managedSettings.registeredModules[moduleKey];\r\n            for (let settingsKey in module.settings) {\r\n                let setting = module.settings[settingsKey];\r\n                if (setting.ui.custom_function && setting.ui.custom_function_event) {\r\n                    $('#' + moduleKey + '_' + settingsKey).on(setting.ui.custom_function_event, setting.ui.custom_function);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function applyModuleFunctions() {\r\n\r\n        // Reset Settings\r\n        $('.settings-reset').click(function () {\r\n            if (!confirm(I18n.t('lssm.managedsettings.reset_hint'))) {\r\n                return;\r\n            }\r\n            let moduleId = $(this).data('module');\r\n            lssm.managedSettings.reset(moduleId);\r\n            $('#' + lssm.config.prefix + '_appstore_ManagedSettings').remove();\r\n            renderSettings();\r\n            applySettingsFunctions();\r\n            applyModuleFunctions();\r\n            lssm.notification(I18n.t('lssm.managedsettings.reset_success'), null, 15000);\r\n        });\r\n\r\n        // Export Settings\r\n        $('#lssm-export-settings').click(function () {\r\n            if (!confirm(I18n.t('lssm.managedsettings.export_hint'))) {\r\n                return;\r\n            }\r\n            // Initialize Datamodel 1.1\r\n            let exportData = {\r\n                version: VERSION,\r\n                activeModules: {},\r\n                moduleSettings: {}\r\n            };\r\n\r\n            // Add active Modules\r\n            exportData['activeModules'] = lssm.settings.get(\"Modules\");\r\n\r\n            // Add managedSettings\r\n            for (let moduleKey in lssm.managedSettings.registeredModules) {\r\n                // Export only if there is data\r\n                if (lssm.settings.get(moduleKey)) {\r\n                    exportData.moduleSettings[moduleKey] = lssm.settings.get(moduleKey);\r\n                }\r\n            }\r\n            // Export as file\r\n            let data = \"text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(exportData));\r\n            this.setAttribute(\"href\", \"data:\" + data);\r\n            this.setAttribute(\"download\", EXPORT_FILE_NAME);\r\n\r\n            // Push notification\r\n            lssm.notification(I18n.t('lssm.managedsettings.export_success'));\r\n        });\r\n\r\n        // Simulate click on file selection when clicking \"import\"-btn\r\n        $('#lssm-import-settings').click(function () {\r\n            $('#lssm-import-file').click();\r\n        });\r\n\r\n        // File import Eventhandler -> process import\r\n        $(\"#lssm-import-file:file\").change(function () {\r\n            let file = document.getElementById('lssm-import-file').files[0];\r\n            if (file) {\r\n                // create reader\r\n                let reader = new FileReader();\r\n                reader.readAsText(file);\r\n                reader.onload = function (e) {\r\n                    try {\r\n                        let importedJson = jQuery.parseJSON(e.target.result);\r\n                        // Verfify version compatibility\r\n                        if (importedJson.version < EXPORT_COMPATIBILITY) {\r\n                            lssm.notification(I18n.t('lssm.managedsettings.import_missmatch'), 'alert-danger', 15000);\r\n                            return;\r\n                        }\r\n\r\n                        // Store active Modules\r\n                        lssm.settings.set(\"Modules\", importedJson.activeModules);\r\n\r\n                        // Store module settings\r\n                        for (let moduleKey in importedJson.moduleSettings) {\r\n                            let module = importedJson.moduleSettings[moduleKey];\r\n                            lssm.settings.set(moduleKey, module);\r\n                        }\r\n                        // Push notification\r\n                        lssm.notification(I18n.t('lssm.managedsettings.import_success'), null, 10000);\r\n                        $('#' + lssm.config.prefix + '_appstore_ManagedSettings').remove();\r\n                    } catch (e) {\r\n                        // Oh no :-(\r\n                        lssm.notification(String.format(I18n.t('lssm.managedsettings.import_fail'), e), 'alert-danger', 15000);\r\n                    }\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    function renderUIElement(moduleKey, settingsKey, element) {\r\n        let elementName = moduleKey + '_' + settingsKey;\r\n        let response = '<div id=\"' + elementName + '_wrap\"' + (element.ui.hidden ? 'style=\"display: none;\"' : '') + ' class=\"lssm_setting_line\">';\r\n        if (element.ui.type === \"radio\") {\r\n            let optionCount = 0;\r\n            $.each(element.ui.options, function () {\r\n                let prop_checked = \"\";\r\n                if (this.value === element.value) prop_checked = \" checked \";\r\n                response += '<div id=\"' + elementName + '_' + optionCount + '_wrap\" class=\"col-md-12\" style=\"border-bottom:1px solid black\">';\r\n                response += '<div style=\"margin-left: 4px;\" class=\"col-md-6\">' + this.title + '<br />';\r\n                response += '<small>' + this.description + '</small></div>';\r\n                response += '<div class=\"col-md-4\">';\r\n                response += '<input type=\"radio\" name=\"' + elementName + '\" id=\"' + elementName + '_' + optionCount + '\" ' +\r\n                    prop_checked;\r\n                response += ' value=\"' + this.value + '\">';\r\n                response += '</div></div>';\r\n                optionCount++;\r\n            });\r\n        } else if (element.ui.type === \"checkbox\") {\r\n            let checked = element.value === true ? \" checked \" : \"\";\r\n            response += '<div style=\"margin-left: 16px;\" class=\"col-md-12\">';\r\n            response += '<div class=\"col-md-6\">' + element.ui.label;\r\n            if (element.ui.description) response += '<br /><small>' + element.ui.description + '</small>';\r\n            response += '</div>';\r\n            response += '<div class=\"col-md-2\"><input type=\"checkbox\" ' + checked +\r\n                ' style=\"margin-right: 4px;\" name=\"' + elementName + '\" id=\"' + elementName + '\"></div>';\r\n            response += '</div>';\r\n        } else if (element.ui.type === \"hidden\") {\r\n            response += '<input type=\"hidden\" value=\"' + element.value + '\" id=\"' + elementName + '\" name=\"' + elementName +\r\n                '\">';\r\n        } else if (element.ui.type === \"button\") {\r\n            response += '<div class=\"col-md-3\">';\r\n            response += '<button type=\"button\" class=\"btn btn-grey btn-sm\" id=\"' + elementName +\r\n                '\" style=\"margin-left: 16px;\">' + element.ui.label + '</button></div>';\r\n        } else if (element.ui.type === \"text\" || element.ui.type === \"int\" || element.ui.type === \"float\") {\r\n            response += '<div class=\"col-md-12 ' + (element.ui.class ? element.ui.class : \"\") + '\" id=\"' + elementName + '_wrap\">';\r\n            response += '<span style=\"margin-left: 4px;\" class=\"col-md-4\">' + element.ui.label + '</span>';\r\n            response += '<input type=\"text\" class=\"col-md-4\" name=\"' + elementName + '\" id=\"' + elementName + '\" value=\"' + element.value +\r\n                '\">';\r\n            if (element.ui.description) response += '<div style=\"margin-left: 16px;\">' + element.ui.description + '</div>';\r\n            response += '</div>';\r\n        } else if (element.ui.type === \"number\") {\r\n            response += '<div class=\"col-md-12\" id=\"' + elementName + '_wrap\" ' + (element.ui.class ? 'class=\"' + element.ui.class + '\"' : \"\") +\r\n                '>';\r\n            response += '<span style=\"margin-left: 4px;\" class=\"col-md-4\" >' + element.ui.label + '</span>';\r\n            response += '<input type=\"number\" class=\"col-md-4\" name=\"' + elementName + '\" id=\"' + elementName + '\" value=\"' + element.value +\r\n                '\" ' + (element.ui.min ? ' min=' + element.ui.min : \"\") + (element.ui.max ? ' max=' + element.ui.max : \"\") + '>';\r\n            if (element.ui.description) response += '<div style=\"margin-left: 16px;\">' + element.ui.description + '</div>';\r\n            response += '</div>';\r\n        } else if (element.ui.type === \"toggle\") {\r\n            response +=\r\n                '<div class=\"col-md-3\"><div class=\"panel panel-default\" style=\"display: inline-block;width:100%;\" id=\"' +\r\n                elementName + '_toggle_wrap\">';\r\n            response += '<div class=\"panel-body\"><span class=\"pull-right\"><div class=\"onoffswitch\">';\r\n            response += '<input class=\"onoffswitch-checkbox\" ' + (element.value ? 'checked=\"true\"' : '') + ' id=\"' +\r\n                elementName + '\" value=\"true\" name=\"onoffswitch\" type=\"checkbox\">';\r\n            response += '<label class=\"onoffswitch-label\" for=\"' + elementName + '\"></label>';\r\n            response += '</div></span>';\r\n            response += '<h4>' + element.ui.label + '</h4><small>' + element.ui.description + '</small></div>'\r\n            response += '</div></div>';\r\n        } else {\r\n            console.log(elementName + ' has unknown ui type: ' + element.ui.type);\r\n        }\r\n        response += '</div>';\r\n        return response;\r\n    }\r\n\r\n    function saveSettings() {\r\n        for (let moduleKey in lssm.managedSettings.registeredModules) {\r\n            let module = lssm.managedSettings.registeredModules[moduleKey];\r\n            for (let settingsKey in module.settings) {\r\n                let setting = module.settings[settingsKey];\r\n                let elementName = moduleKey + '_' + settingsKey;\r\n                let formElement = $('#' + elementName);\r\n                if (setting.ui.type === 'checkbox' || setting.ui.type === 'toggle') {\r\n                    if (formElement.is(':checked')) {\r\n                        setting.value = true;\r\n                    } else {\r\n                        setting.value = false;\r\n                    }\r\n                } else if (setting.ui.type === 'radio') {\r\n                    setting.value = $(\"input[name='\" + elementName + \"']:checked\").val()\r\n                } else if (setting.ui.type === 'int') {\r\n                    setting.value = parseInt(formElement.val());\r\n                } else if (setting.ui.type === 'float') {\r\n                    setting.value = parseFloat(formElement.val());\r\n                } else {\r\n                    setting.value = formElement.val();\r\n                }\r\n\r\n            }\r\n            lssm.managedSettings.update(module);\r\n        }\r\n    }\r\n\r\n    let li = $('<li role=\"presentation\"><a href=\"#\">' + I18n.t('lssm.managedsettings.settings_tab') + '</a></li>').click(\r\n        function () {\r\n            renderSettings();\r\n            applySettingsFunctions();\r\n            applyModuleFunctions();\r\n        })\r\n\r\n    $('#lssm_menu').append(li);\r\n\r\n}\r\n\r\nlssm.Module = {\r\n    managedSettings: {\r\n        name: {\r\n            de: 'Einstellungen',\r\n            en: 'Settings'\r\n        },\r\n        active: true,\r\n        description: {\r\n            de: 'Globale Einstellungen',\r\n            en: 'Global Settings'\r\n        },\r\n        entry: ManagedSettings,\r\n        //noapp: true, // Nicht im App-Store auflisten\r\n        inframe: true,\r\n        develop: false\r\n    },\r\n};\n\n//# sourceURL=webpack:///./modules/lss-managedsettings/ManagedSettings.user.js?");

/***/ })

/******/ });