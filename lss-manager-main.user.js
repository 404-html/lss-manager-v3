/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./lss-manager-v3/lss-manager-v3.dev.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./lss-manager-v3/lss-manager-v3.dev.js":
/*!**********************************************!*\
  !*** ./lss-manager-v3/lss-manager-v3.dev.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("//██╗.....███████╗███████╗....███╗...███╗.█████╗.███╗...██╗.█████╗..██████╗.███████╗██████╗\r\n//██║.....██╔════╝██╔════╝....████╗.████║██╔══██╗████╗..██║██╔══██╗██╔════╝.██╔════╝██╔══██╗\r\n//██║.....███████╗███████╗....██╔████╔██║███████║██╔██╗.██║███████║██║..███╗█████╗..██████╔╝\r\n//██║.....╚════██║╚════██║....██║╚██╔╝██║██╔══██║██║╚██╗██║██╔══██║██║...██║██╔══╝..██╔══██╗\r\n//███████╗███████║███████║....██║.╚═╝.██║██║..██║██║.╚████║██║..██║╚██████╔╝███████╗██║..██║\r\n//╚══════╝╚══════╝╚══════╝....╚═╝.....╚═╝╚═╝..╚═╝╚═╝..╚═══╝╚═╝..╚═╝.╚═════╝.╚══════╝╚═╝..╚═╝\r\n/**\r\n * Tell jQuery to allow caching beforehand!\r\n */\r\n$.ajaxPrefilter(function (options, originalOptions) {\r\n    if (options.dataType === 'script' || originalOptions.dataType === 'script' ||\r\n        options.dataType === 'stylesheet' || originalOptions.dataType === 'stylesheet') {\r\n        options.cache = true;\r\n    }\r\n});\r\n\r\n/**\r\n * Make case insensetive :contains() possible\r\n */\r\njQuery.expr[':'].containsci = function (a, i, m) {\r\n    return jQuery(a).text().toUpperCase()\r\n        .indexOf(m[3].toUpperCase()) >= 0;\r\n};\r\n\r\nwindow.lssm = {\r\n    config: {\r\n        //server: \"https://localhost/lss-manager-v3\",\r\n        server: \"https://lss-manager.de/lss-webpack\", // Domain wo alles liegt\r\n        stats_uri: \"https://proxy.lss-manager.de/stat.php\",\r\n        forum_link: \"https://forum.leitstellenspiel.de/index.php/Thread/11166-LSS-MANAGER-V3/\",\r\n        key_link: \"/profile/external_secret_key/\", // Domain wo alles liegt\r\n        version: \"3.3.5\",\r\n        github: 'https://github.com/LSS-Manager/lss-manager-v3',\r\n        prefix: 'lssm'\r\n    },\r\n    loadScript: function (link) {\r\n        try {\r\n            let uid = \"\";\r\n            let game = \"\";\r\n            if (typeof user_id !== \"undefined\") {\r\n                game = window.location.hostname.toLowerCase().replace(\"www.\", \"\").split(\".\")[0];\r\n            }\r\n            uid = \"?uid=\" + game + user_id;\r\n            //$('body').append('<script src=\"' + this.config.server + link + uid +'\" type=\"text/javascript\"></script>');\r\n            $.getScript(this.config.server + link + uid);\r\n        } catch (e) {\r\n            console.error(\"On script load: \" + e.message);\r\n        }\r\n    },\r\n    loadStyle: function (link) {\r\n        try {\r\n            let uid = \"\";\r\n            let game = \"\";\r\n            if (typeof user_id !== \"undefined\") {\r\n                game = window.location.hostname.toLowerCase().replace(\"www.\", \"\").split(\".\")[0];\r\n            }\r\n            uid = \"?uid=\" + game + user_id;\r\n            $('body').append('<link href=\"' + this.getlink(link) + '\" rel=\"stylesheet\" type=\"text/css\">');\r\n        } catch (e) {\r\n            console.error(\"On script load: \" + e.message);\r\n        }\r\n    },\r\n    getlink: function (file) {\r\n        try {\r\n            let uid = \"\";\r\n            let game = \"\";\r\n            if (typeof user_id !== \"undefined\") {\r\n                game = window.location.hostname.toLowerCase().replace(\"www.\", \"\").split(\".\")[0];\r\n            }\r\n            uid = \"?uid=\" + game + user_id;\r\n            return this.config.server + file + uid;\r\n        } catch (e) {\r\n            console.error(\"On script load: \" + e.message);\r\n        }\r\n    },\r\n    key: null,\r\n    buildings: {},\r\n    vehicles: {},\r\n};\r\n\r\n\r\n/**\r\n * Localization\r\n */\r\nI18n.defaultLocale = 'de';\r\nI18n.fallbacks = true;\r\nI18n.locales.nl = ['nl', 'en', 'de'];\r\nI18n.translations.de.lssm = {\r\n    lssm: \"LSS-Manager\",\r\n    version: \"Beta\",\r\n    appstore: \"APPSTORE\",\r\n    appstore_welcome: \"Willkommen im Appstore vom LSS Manager\",\r\n    appstore_desc: \"Hier findest du verschiedene Plugins, die dein Spielerlebnis bereichern sollen. Jedes Plugin \" +\r\n    \"kann einzeln aktiviert werden, indem du den Hebel auf Grün stellst. Sollte es zu irgendwelchen Problemen \" +\r\n    \"kommen, kannst du uns gerne eine Nachricht schreiben oder <a href=\\\"\" +\r\n    \"https://forum.leitstellenspiel.de/index.php/Thread/11166-LSS-MANAGER-V3/\" +\r\n    \"\\\" target=\\\"blank\\\">im Forum einen Beitrag verfassen</a>.\",\r\n    back_lss: \"Zurück zu Leitstellenspiel\",\r\n    settings: \"Einstellungen\",\r\n    saving: \"Speichere...\",\r\n    save: \"Speichern\",\r\n    cantactivate: \"kann nicht aktiviert werden, da es mit folgenden Modul(en) inkompatibel ist:\",\r\n    activated: \"Folgende Module wurden aktiviert:\",\r\n    cantload: \"<h2>LSS-Manager konnte nicht geladen werden</h2>Bitte kontaktiere ein Mitglied vom Entwicklerteam.\",\r\n    login: \"Bitte zuerst anmelden\",\r\n    mapkit: \"Dieses Modul unterstützt kein Mapkit\",\r\n    apps: {}\r\n};\r\nI18n.translations.en.lssm = {\r\n    appstore_welcome: \"Welcome to the Appstore of LSS Manager\",\r\n    appstore_desc: \"Here you will find various plugins that will enrich your playing experience. Each plugin can be \" +\r\n    \"activated individually by placing the lever on green. If there are any problems, you can write us a message or \" +\r\n    \"<a href=\\\"\" +\r\n    \"http://board.missionchief.com/index.php/Thread/146-LSS-Manager-for-missionchief/\" +\r\n    \"\\\" target=\\\"blank\\\">write a message in the forum</a>.\",\r\n    back_lss: \"Back to missionchief\",\r\n    settings: \"Settings\",\r\n    saving: \"Saving...\",\r\n    save: \"Save\",\r\n    activated: \"Following Modules have been activated:\",\r\n    cantactivate: \"can't be activated as it's incompatible with the following modul(es):\",\r\n    cantload: \"<h2>LSS-Manager could not be loaded</h2>Please contact a member of the development team.\",\r\n    login: \"Please log in first\",\r\n    mapkit: \"This module doesn't support Mapkit\",\r\n    apps: {}\r\n};\r\nI18n.translations.nl.lssm = {\r\n    appstore_welcome: \"Welkom bij de App Store van LSS Manager\",\r\n    appstore_desc: \"Hier vindt u verschillende plug-ins die uw game-ervaring kunnen verbeteren. \" +\r\n    \"Elke plugin kan individueel worden geactiveerd, de bijbehorende hendel op groen te zetten. Mochten er \" +\r\n    \"problemen zijn, kunt u <a href=\\\"\" +\r\n    \"https://forum.meldkamerspel.com/index.php/Thread/52-LSS-Manager-for-meldkamerspel/\" +\r\n    \"\\\" target=\\\"blank\\\">ons een bericht sturen of een bericht posten in ons topic op het forum.</a>.\",\r\n    back_lss: \"Terug naar Meldkamerspel\",\r\n    settings: \"Instellingen\",\r\n    saving: \"Wijzigingen aan het opslaan...\",\r\n    save: \"Opslaan\",\r\n    activated: \"De volgende modules zijn geactiveerd:\",\r\n    cantactivate: \"Kan niet worden geactiveerd omdat deze lssm_module niet samenwerkt met de volgende lssm_module(s):\",\r\n    mapkit: \"Deze module ondersteunt Mapkit niet\",\r\n    apps: {}\r\n};\r\n\r\n/**\r\n * Add the modules to lssm\r\n */\r\nlssm.Module = {};\r\n\r\n/**\r\n * Add the appstore to LSSM\r\n */\r\nlssm.appstore = {\r\n    /**\r\n     * Checks if a lssm_module collides with other modules\r\n     * @param mod\r\n     * @returns {boolean}\r\n     */\r\n    canActivate: function (mod) {\r\n        let ca = true;\r\n        // TODO: Sprechendere Variablennamen\r\n        if ('collisions' in mod) {\r\n            for (let c in mod.collisions) {\r\n                let d = mod.collisions[c];\r\n                if (lssm.Module[d].active) {\r\n                    ca = false;\r\n                }\r\n            }\r\n        }\r\n        return ca;\r\n    },\r\n\r\n    hideAllForSettings: function () {\r\n        $('.' + lssm.config.prefix + '__appstore_hideForSettings').hide();\r\n    },\r\n    // Erstellen der Pandels\r\n    createModulePanels: function () {\r\n        let panels = $('<div class=\"row\">' +\r\n            '<div class=\"col-sm-4\" id=\"apps_col_0\"></div>' +\r\n            '<div class=\"col-sm-4\" id=\"apps_col_1\"></div>' +\r\n            '<div class=\"col-sm-4\" id=\"apps_col_2\"></div>' +\r\n            '</div>');\r\n        let col = 0;\r\n        // Get all the keys of the modules\r\n        let mods = $.map(lssm.Module, function (value, index) {\r\n            return [index];\r\n        });\r\n        // Sort the lssm_module keys\r\n        mods.sort(function (a, b) {\r\n            \"use strict\";\r\n            let aName = I18n.t(\"lssm.apps.\" + a + \".name\").toLowerCase();\r\n            let bName = I18n.t(\"lssm.apps.\" + b + \".name\").toLowerCase();\r\n            if (aName < bName) {\r\n                return -1;\r\n            } else {\r\n                return (aName > bName) ? 1 : 0;\r\n            }\r\n        });\r\n        for (let i in mods) {\r\n            let mod = lssm.Module[mods[i]];\r\n            let isSupportedLocale = !('supportedLocales' in mod) ||\r\n                mod.supportedLocales.indexOf(I18n.currentLocale()) >= 0;\r\n            // Do not show certain modules in the lssm.appstore or is not supported with this locale\r\n            if ('noapp' in mod && mod.noapp === true || !isSupportedLocale) {\r\n                continue;\r\n            }\r\n            let nomapkit = (typeof mapkit !== \"undefined\" && 'nomapkit' in mod && mod.nomapkit === true);\r\n            let dom = '<div style=\"margin-top:10px;\" class=\"lssm_module' +\r\n                (mod.develop ? ' lssm_module_develop' : '') + '\">' +\r\n                '<div class=\"panel panel-default\" style=\"display: inline-block;width:100%;\">' +\r\n                '<div class=\"panel-body\">' +\r\n                '<span class=\"pull-right\">';\r\n            if(!nomapkit)\r\n                dom += '<div class=\"onoffswitch\">' +\r\n                    '<input class=\"onoffswitch-checkbox\" id=\"lssm.modules_' + mods[i] + '\" ' +\r\n                    (mod.active ? 'checked=\"true\"' : '') + ' value=\"' + mods[i] +\r\n                    '\" name=\"onoffswitch\" type=\"checkbox\">' +\r\n                    '<label class=\"onoffswitch-label\" for=\"lssm.modules_' + mods[i] + '\"></label>' +\r\n                    '</div>';\r\n            dom += '</span>' +\r\n                '<h4>' + I18n.t('lssm.apps.' + mods[i] + '.name') + '</h4>';\r\n            if(!nomapkit)\r\n                dom += '<small style=\"display:none\">' + I18n.t('lssm.apps.' + mods[i] + '.description');\r\n            else\r\n                dom += '<small style=\"color:darkred\">' +I18n.t('lssm.mapkit');\r\n\r\n            dom += '</small>' +\r\n                '</div>' +\r\n                '</div>' +\r\n                '</div>';\r\n            let panel = $(dom);\r\n            panels.find(\"#apps_col_\" + col).append(panel);\r\n            col++;\r\n            if (col > 2) {\r\n                col = 0;\r\n            }\r\n        }\r\n        return panels;\r\n    },\r\n\r\n    // Packt alle ModulPanels in ein Div zudem werden beim an und ausschalten die Einstellungen ge?ndert  & gespeichert;\r\n    // TODO: DIV mit ID so wie CSS ausstatten & festlegen wo es eingebettet werden soll\r\n    createModuleMain: function () {\r\n        let prefix = lssm.config.prefix + '_appstore';\r\n        let div = $(\r\n            '<div class=\"col-md-12 lssm.appstore\" id=\"' + prefix + '\">' +\r\n            '<div class=\"row\">' +\r\n            '<h2>' + I18n.t('lssm.appstore') + '</h2>' +\r\n            '<p class=\"lead\">' + I18n.t('lssm.appstore_welcome') + '.</p>' +\r\n            '<p>' + I18n.t('lssm.appstore_desc') + '</p>' +\r\n            '<input type=\"text\" class=\"form-control pull-right\" id=\"' + prefix +\r\n            '_search\" placeholder=\"Suche\" style=\" width:25%;display:inline-block;\">' +\r\n            '</div>' +\r\n            '</div>'\r\n        );\r\n        div.append(this.createModulePanels());\r\n        return div;\r\n    },\r\n\r\n    // Menüpunkt zu den Modulen / Einstellungen / Dashboard\r\n    appendAppstore: function () {\r\n        // Variablen setzen für weitere Verwendung\r\n        let prefix = lssm.config.prefix + '_appstore';\r\n        let settingButton = $('<li role=\"presentation\" id=\"' + prefix + '\"><a id=\"' + prefix +\r\n            '_activate\" href=\"#\">' +\r\n            I18n.t('lssm.appstore') + '</a></li>');\r\n\r\n        let content = $('#navbar-mobile-footer').prev();\r\n        content.attr('id', 'content');\r\n\r\n        settingButton.click(function () {\r\n            let div = $('<div class=\"row\" id=\"' + prefix + '_row\"></div>').append(lssm.appstore.createModuleMain());\r\n            let dom = lssm.modal.show(div.html(), lssm.appstore.closeAppstore);\r\n            $(dom).on('keyup', '#' + prefix + '_search', function () {\r\n                \"use strict\";\r\n                let ss = $(this).val();\r\n                if (ss.length > 0) {\r\n                    $(dom).find(\".lssm_module:containsci(\" + ss + \")\").show();\r\n                    $(dom).find(\".lssm_module:not(:containsci(\" + ss + \"))\").hide();\r\n                } else {\r\n                    $(dom).find(\".lssm_module\").show();\r\n                }\r\n            });\r\n            $(dom).on('change', '.onoffswitch-checkbox', function (ev) {\r\n                let e = ev.target;\r\n                if (e.checked && !lssm.appstore.canActivate(lssm.Module[e.value])) {\r\n                    $(e).prop('checked', false);\r\n                    let warn = \"\\\"\" + I18n.t('lssm.apps.' + e.value + '.name') + \"\\\" \" + I18n.t(\r\n                        'lssm.cantactivate');\r\n                    // TODO: Sprechendere Variablennamen\r\n                    for (let c in lssm.Module[e.value].collisions) {\r\n                        let d = lssm.Module[e.value].collisions[c];\r\n                        if (lssm.Module[d].active) {\r\n                            warn += \"\\r\\n\" + I18n.t('lssm.apps.' + d + '.name');\r\n                        }\r\n                    }\r\n                    alert(warn);\r\n                    return;\r\n                }\r\n                lssm.Module[e.value].active = e.checked;\r\n            });\r\n            $(dom).find(\"h4\").on(\"click\", function () {\r\n                \"use strict\";\r\n                let next = $(this).next();\r\n                if (next.is(\":hidden\")) {\r\n                    next.slideDown(\"slow\");\r\n                } else {\r\n                    next.slideUp(\"slow\");\r\n                }\r\n            });\r\n        });\r\n        // einhängen des Buttons in der Navi\r\n        $('#' + lssm.config.prefix + '_menu').append(settingButton);\r\n    },\r\n    closeAppstore: function () {\r\n        \"use strict\";\r\n        let action = lssm.appstore.checkModChanges();\r\n        lssm.modules.saveall();\r\n        if (action === \"Reload\") {\r\n            location.reload();\r\n        } else {\r\n            $(document).unbind(lssm.hook.prename(\"lightboxClose\"),lssm.appstore.closeAppstore);\r\n            // Inform the user about activated modules.\r\n            let activated = \"\";\r\n            for (let m in action) {\r\n                lssm.modules.load(action[m]);\r\n                activated += I18n.t('lssm.apps.' + action[m] + '.name') + ', ';\r\n            }\r\n            activated = activated.substring(0, activated.length - 2);\r\n            if (activated.length > 0) {\r\n                let msg = I18n.t('lssm.activated') + ' ' + activated;\r\n                lssm.notification(msg);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Check if modules have been activated/deactivated and tell the caller what to do.\r\n     * Returns: \"Reload\" or a array of modules to load\r\n     */\r\n    checkModChanges: function () {\r\n        \"use strict\";\r\n        let activated = [];\r\n        let deactivated = [];\r\n        let modules = lssm.settings.get(\"Modules\", {});\r\n        for (let m in lssm.Module) {\r\n            if (modules[m] && !lssm.Module[m].active) {\r\n                deactivated.push(m);\r\n            } else if ((!modules[m]) && lssm.Module[m].active) {\r\n                activated.push(m);\r\n            }\r\n        }\r\n        if (deactivated.length > 0) {\r\n            return \"Reload\";\r\n        }\r\n        return activated;\r\n    },\r\n\r\n    createDropDown: function () {\r\n        let lssm_dropdown = $(' <li class=\"dropdown\" id=\"' + lssm.config.prefix + '_dropdown\">' +\r\n            '<a href=\"#\" id=\"' + lssm.config.prefix +\r\n            '_menu_switch\" role=\"button\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\">' +\r\n            '<span class=\"label label-success\">' + I18n.t('lssm.lssm') + '</span> <b class=\"caret\"></b>' +\r\n            '</a>' +\r\n            '<ul id=\"' + lssm.config.prefix + '_menu\"class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"' +\r\n            lssm.config.prefix + '_menu_switch\"> </ul>' +\r\n            '</li>');\r\n        $('#navbar-main-collapse > ul').append(lssm_dropdown);\r\n    }\r\n};\r\n\r\n/**\r\n * Add the settings-functions to lssm\r\n */\r\nlssm.settings = {\r\n    // Set a value to the localstorage\r\n    set: function (key, value) {\r\n        \"use strict\";\r\n        if (typeof value === \"object\")\r\n        // We have a object, parse it to json and save it.\r\n        {\r\n            localStorage.setItem(lssm.config.prefix + '_' + key, JSON.stringify(value));\r\n        } else\r\n        // Otherwise we save the raw value\r\n        {\r\n            localStorage.setItem(lssm.config.prefix + '_' + key, value);\r\n        }\r\n    },\r\n\r\n\texists: function(key)\r\n\t{\r\n\t\treturn localStorage.getItem(lssm.config.prefix + '_' + key) !== null;\r\n\t},\r\n\r\n    // Get a config value from localstorage\r\n    get: function (key, defaultvalue) {\r\n        \"use strict\";\r\n        if (typeof defaultvalue === \"undefined\")\r\n        // defaultvalue is not set, return null if nothing found\r\n        {\r\n            defaultvalue = null;\r\n        }\r\n        let data;\r\n        try {\r\n            // Try to parse the config string as json\r\n            data = JSON.parse(localStorage.getItem(lssm.config.prefix + '_' + key)) || defaultvalue;\r\n        } catch (e) {\r\n            // Couldn't parse the config value as json. Return the raw value\r\n            data = (localStorage.getItem(lssm.config.prefix + '_' + key)) || defaultvalue;\r\n        }\r\n        return data;\r\n    },\r\n\r\n    // Remove a config value from localstorage\r\n    remove: function (key) {\r\n        \"use strict\";\r\n        localStorage.removeItem(key);\r\n    }\r\n};\r\n\r\n/**\r\n * Add the managed settings-functions to lssm\r\n */\r\nlssm.managedSettings = {\r\n    registeredModules: {},\r\n\r\n    register: function (moduleSettings) {\r\n        \"use strict\";\r\n        let moduleId = moduleSettings.id;\r\n        let settingsKey;\r\n        // If settings don't exist, overwrite with defaults\r\n        if (!lssm.settings.get(moduleId)) {\r\n            for (settingsKey in moduleSettings.settings) {\r\n                moduleSettings.settings[settingsKey].value = moduleSettings.settings[settingsKey].default;\r\n            }\r\n            // If we have values use them\r\n        } else {\r\n            let storedSettings = lssm.settings.get(moduleId);\r\n            for (settingsKey in moduleSettings.settings) {\r\n                if (storedSettings[settingsKey] != null) {\r\n                    moduleSettings.settings[settingsKey].value = storedSettings[settingsKey];\r\n                } else {\r\n                    moduleSettings.settings[settingsKey].value = moduleSettings.settings[settingsKey].default;\r\n                }\r\n            }\r\n        }\r\n        lssm.managedSettings.registeredModules[moduleId] = moduleSettings;\r\n    },\r\n\r\n    reset: function (moduleId) {\r\n        if (!lssm.settings.get(moduleId) || !lssm.managedSettings.registeredModules[moduleId]) {\r\n            return;\r\n        }\r\n        lssm.settings.remove(lssm.config.prefix + '_' + moduleId);\r\n        lssm.managedSettings.register(lssm.managedSettings.registeredModules[moduleId]);\r\n    },\r\n\r\n    getSetting: function (module, field) {\r\n        \"use strict\";\r\n        let settings = this.getSettings(module);\r\n        if (settings && settings[field] !== undefined) {\r\n            return settings[field].value;\r\n        } else {\r\n            return null;\r\n        }\r\n    },\r\n\r\n    getSettings: function (module) {\r\n        \"use strict\";\r\n        if (lssm.managedSettings.registeredModules[module]) {\r\n            return lssm.managedSettings.registeredModules[module].settings;\r\n        } else {\r\n            return null;\r\n        }\r\n    },\r\n\r\n    update: function (moduleSettings) {\r\n        \"use strict\";\r\n\r\n        // Store managedSettings for runtime\r\n        let moduleId = moduleSettings.id;\r\n        lssm.managedSettings.registeredModules[moduleId] = moduleSettings;\r\n\r\n        // Strip down settings object to values only and persist them\r\n        let storeSettings = {};\r\n        let settingsKey;\r\n        for (settingsKey in moduleSettings.settings) {\r\n            storeSettings[settingsKey] = moduleSettings.settings[settingsKey].value;\r\n        }\r\n        lssm.settings.set(moduleId, storeSettings);\r\n    }\r\n\r\n};\r\n\r\n/**\r\n * Add the module-handler to LSSM\r\n */\r\nlssm.modules = {\r\n    saveall: function () {\r\n        \"use strict\";\r\n        let arr = {};\r\n        for (let i in lssm.Module) {\r\n            if(lssm.Module[i].active)\r\n                arr[i] = lssm.Module[i].active;\r\n        }\r\n        lssm.settings.set(\"Modules\", arr);\r\n    },\r\n    // Zum zwischenspeichern der schon geladenen Module\r\n    addLocales: function (module) {\r\n        let mod = module.toString();\r\n        if (mod in lssm.Module) {\r\n            let keys = ['name', 'description'];\r\n            // TODO: sprechendere Variablennamen\r\n            for (let k in keys) {\r\n                k = keys[k];\r\n                if (!(k in lssm.Module[mod])) {\r\n                    continue;\r\n                }\r\n                for (let l in lssm.Module[mod][k]) {\r\n                    l = l.toString();\r\n                    if (!(mod in I18n.translations[l].lssm.apps)) {\r\n                        I18n.translations[l].lssm.apps[mod] = {};\r\n                    }\r\n                    I18n.translations[l].lssm.apps[mod][k] = lssm.Module[mod][k][l];\r\n                }\r\n            }\r\n        }\r\n    },\r\n    loadall: function () {\r\n        \"use strict\";\r\n        try {\r\n            for (let m in lssm.Module) {\r\n                this.load(m);\r\n            }\r\n        } catch (e) {\r\n            console.error(\"LOADALL: \" + e.message);\r\n        }\r\n    },\r\n\r\n    load: function (module) {\r\n        try {\r\n            let path = window.location.pathname.length;\r\n            let uid = \"\";\r\n            let game = \"\";\r\n            if (typeof user_id !== \"undefined\") {\r\n                game = window.location.hostname.toLowerCase().replace(\"www.\", \"\").split(\".\")[0];\r\n            }\r\n            uid = \"?uid=\" + game + user_id;\r\n            this.addLocales(module);\r\n            if (lssm.Module[module].active && lssm.Module.status !== 'develop' &&\r\n                lssm.appstore.canActivate(lssm.Module[module])) {\r\n                if (path <= 2 || (\"inframe\" in lssm.Module[module] && lssm.Module[module].inframe ===\r\n                    true)) {\r\n                    if (lssm.Module[module].entry) {\r\n                        lssm.Module[module].entry.call();\r\n                    }\r\n                }\r\n            }\r\n        } catch (e) {\r\n            console.error(\"On lssm_module load: \" + e.message);\r\n        }\r\n    },\r\n    isActive: function(e) {\r\n        return lssm.Module[e].active;\r\n    }\r\n};\r\n\r\n/**\r\n * Add hooks to lssm\r\n */\r\nlssm.hook = {\r\n    orgfunctions: {},\r\n    prename: function (event) {\r\n        \"use strict\";\r\n        let self = this;\r\n        if (!this.orgfunctions.hasOwnProperty(event)) {\r\n            this.orgfunctions[event] = window[event];\r\n            window[event] = function () {\r\n                $(document).trigger(\"lssm_\" + event + \"_before\", arguments);\r\n                self.orgfunctions[event].apply(window, arguments);\r\n                $(document).trigger(\"lssm_\" + event + \"_after\", arguments);\r\n            };\r\n        }\r\n        return \"lssm_\" + event + \"_before\";\r\n    },\r\n    postname: function (event) {\r\n        \"use strict\";\r\n        let self = this;\r\n        if (!this.orgfunctions.hasOwnProperty(event)) {\r\n            this.orgfunctions[event] = window[event];\r\n            window[event] = function () {\r\n                $(document).trigger(\"lssm_\" + event + \"_before\", arguments);\r\n                self.orgfunctions[event].apply(window, arguments);\r\n                $(document).trigger(\"lssm_\" + event + \"_after\", arguments);\r\n            };\r\n        }\r\n        return \"lssm_\" + event + \"_after\";\r\n    }\r\n};\r\n\r\nlssm.modal = {\r\n    /**\r\n     * Creates a new modal\r\n     * @param content The content\r\n     * @param closefunc Function to call when closed\r\n     * @returns {string} The ID of the modal\r\n     */\r\n    show: function (content, closefunc) {\r\n        \"use strict\";\r\n        let e = parseInt($(\"#lightbox_background\").css(\"width\")),\r\n            i = parseInt($(\"#lightbox_background\").css(\"height\")),\r\n            n = i - 100;\r\n        if (592 > n) {\r\n            n = i - 30;\r\n        }\r\n        let s = e - 70;\r\n        if (862 > s) {\r\n            s = e - 0;\r\n        }\r\n        let o = s - 2,\r\n            a = n - 34,\r\n            r = (e - s) / 2;\r\n        $(\"#lightbox_box\").css(\"width\", s + \"px\")\r\n            .css(\"height\", n + \"px\")\r\n            .show();\r\n        $(\"#lightbox_box\")\r\n            .append('<div class=\"lightbox_iframe\" style=\"width:' + o + \"px;height:\" + a +\r\n                'px\" id=\"lightbox_iframe_' +\r\n                iframe_lightbox_number + '\"><div id=\"iframe-inside-container\">' + content + '</div></div>');\r\n        $(\"#lightbox_background\").show();\r\n        $(\"#lightbox_box\").css(\"left\", r + \"px\");\r\n        $(\"#lightbox_box\").css(\"top\", (i - n) / 2 + \"px\");\r\n        $(\"#lightbox_iframe_\" + iframe_lightbox_number + \" #iframe-inside-container\").css(\"height\", a).css(\r\n            \"width\", o);\r\n        setTimeout(function () {\r\n            $(\"#lightbox_iframe_\" + iframe_lightbox_number).show().focus();\r\n            if (typeof closefunc !== \"undefined\") {\r\n                $(document).bind(lssm.hook.prename(\"lightboxClose\"), closefunc);\r\n            }\r\n        }, 100);\r\n        return \"#lightbox_iframe_\" + iframe_lightbox_number + \" #iframe-inside-container\";\r\n    }\r\n};\r\n\r\n/**\r\n * Lets roll!\r\n */\r\n(function (I18n, $) {\r\n    // Append our main css\r\n    $(\"head\")\r\n        .prepend('<link href=\"' + lssm.getlink('/lss-manager-v3/css/main.css') +\r\n            '\" rel=\"stylesheet\" type=\"text/css\">');\r\n    // Create the lssm dropdown menu\r\n    lssm.appstore.createDropDown();\r\n    // And append the version to it\r\n    $('#' + lssm.config.prefix + '_menu')\r\n        .prepend('<li class=\"menu-center\"><a href=\"' + lssm.config.github + '\" target=\"_blank\">' +\r\n            I18n.t('lssm.version') + ': ' + lssm.config.version + '</a></li><li class=\"divider\"></li>');\r\n    // Only execute everything else if user is logged in\r\n    if (typeof user_id === \"undefined\") {\r\n        $('#' + lssm.config.prefix + '_menu').append('<li class=\"menu-center\">' + I18n.t('lssm.login') +\r\n            '</li>');\r\n    } else {\r\n        // Oh, and don't forget the helperfunctions\r\n        $.getScript(lssm.getlink('/lss-manager-helpers.user.js'))\r\n            .fail(function () {\r\n                $(\"#map_outer\")\r\n                    .before(\r\n                        '<div class=\"alert alert-danger alert-dismissable\" style=\"text-align:center\"><a href=\"#\" ' +\r\n                        'class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">&times;</a>' +\r\n                        I18n.t('lssm.cantload') + '</div>');\r\n            })\r\n            .done(function () {\r\n                // There goes the core\r\n                let loadCore = function () {\r\n                    // Load required library's\r\n                    $(\"head\")\r\n                        .append(\r\n                            '<script src=\"https://code.jquery.com/ui/1.12.1/jquery-ui.min.js\" ' +\r\n                            'integrity=\"sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=\" crossorigin=\"anonymous\">' +\r\n                            '</script>')\r\n                        .append('<script src=\"' + lssm.getlink('/lss-manager-v3/js/highcharts.min.js') +\r\n                            '\" type=\"text/javascript\"></script>')\r\n                        .append(\r\n                            '<link rel=\"stylesheet\" ' +\r\n                            'href=\"https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.6-rc.0/css/select2.min.css\">'\r\n                        );\r\n                    lssm.get_vehicles(true);\r\n                    lssm.get_buildings(true);\r\n                    setInterval(function(){lssm.get_buildings(false);lssm.get_vehicles(false);}, 120000);\r\n                    // Get the last activated modules\r\n                    $.getScript(lssm.getlink('/lss-manager-modules.user.js'))\r\n                        .fail(function () {\r\n                            $(\"#map_outer\")\r\n                                .before(\r\n                                    '<div class=\"alert alert-danger alert-dismissable\" style=\"text-align:center\"><a href=\"#\" ' +\r\n                                    'class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">&times;</a>' +\r\n                                    I18n.t('lssm.cantload') + '</div>');\r\n                        })\r\n                        .done(function () {\r\n                            let modules = lssm.settings.get('Modules') || {};\r\n                            let deact = 0;\r\n                            for (let i in modules) {\r\n                                let modname = i.toString();\r\n                                let nomapkit = (typeof mapkit !== \"undefined\" && 'nomapkit' in lssm.Module[i] && lssm.Module[i].nomapkit === true);\r\n                                if (nomapkit && modules[i]) {\r\n                                    console.error(modname + \" is not compatible with mapkit.\");\r\n                                    lssm.Module[i].active = false;\r\n                                    deact++;\r\n                                    continue;\r\n                                }\r\n                                else if ((modname in lssm.Module) === false) {\r\n                                    console.error(modname + \" is not a valid app. Skipping.\");\r\n                                    deact++;\r\n                                    continue;\r\n                                }\r\n                                else if (lssm.Module[i].active === false) {\r\n                                    lssm.Module[i].active = modules[i];\r\n                                }\r\n                            }\r\n                            if(deact>0)\r\n                                lssm.modules.saveall();\r\n                            // Let's load all the modules\r\n                            lssm.modules.loadall();\r\n                            // Oh, we also need a appstore\r\n                            lssm.appstore.appendAppstore();\r\n                        });\r\n                };\r\n                loadCore();\r\n            });\r\n    }\r\n})(I18n, jQuery);\n\n//# sourceURL=webpack:///./lss-manager-v3/lss-manager-v3.dev.js?");

/***/ })

/******/ });